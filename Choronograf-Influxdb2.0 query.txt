#chronograf- influxdB 2.0

1. online force

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Ziehkraft_IST_LIN_int")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value: r.Ziehkraft_IST_LIN_int }))
  |> group(columns: ["COIL_ID"], mode:"by")

2. Online Speed

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "ISTWERT_ZIEHGESCHW_m_min")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value: r.ISTWERT_ZIEHGESCHW_m_min }))
  |> group(columns: ["COIL_ID"], mode:"by")
  
3. Max drawing force

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => r.Drawing_force > 0)
  |> group(columns: ["COIL_ID"])
  |> max(column: "Drawing_force")
  |>group()

4. Mean drawing force


from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value: r.Drawing_force }))
  |> group(columns: ["COIL_ID"])
  |> mean(column: "Drawing_force")
  |>group()



5. Diameter_in

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "D_Roh")
  |> map(fn: (r) => ({ r with Diameter_in: r._value * 0.1 }))
  
6. Diameter_out

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "D_Fertig")
  |> map(fn: (r) => ({ r with Diameter_out: r._value * 0.1 }))

7. Max Pushing Force 

data1 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value1: r.Drawing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> max(column: "Drawing_force")
  |> group()

  data2 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Pushing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value2: r.Pushing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> group()

  join(
 tables: {data1:data1,data2:data2}, 
 on: ["COIL_ID"], method: "inner"
)

|> filter(fn: (r) => r._value2 > r._value1)
|> group(columns: ["COIL_ID"])
|>max(column:"_value2")
|> map(fn: (r) => ({ r with Max_pushing_force: r._value2}))


8. Avg Pushing Force

data1 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value1: r.Drawing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> max(column: "Drawing_force")
  |> group()

  data2 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Pushing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value2: r.Pushing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> group()

  join(
 tables: {data1:data1,data2:data2}, 
 on: ["COIL_ID"], method: "inner"
)

|> filter(fn: (r) => r._value2 > r._value1)
|> group(columns: ["COIL_ID"])
|>mean(column:"_value2")
|> map(fn: (r) => ({ r with _Avg_pushing_force: r._value2}))


9. relation between max Pushing_Force and max Drawing Force 

data1 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value1: r.Drawing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> max(column: "Drawing_force")
  |> group()

  data2 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Pushing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value2: r.Pushing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> group()

data3 = join(
 tables: {data1:data1,data2:data2}, 
 on: ["COIL_ID"], method: "inner"
)

|> filter(fn: (r) => r._value2 > r._value1)
|> group(columns: ["COIL_ID"])
|>max(column:"_value2")

data4 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => r.Drawing_force > 0)
  |> group(columns: ["COIL_ID"])
  |> max(column: "Drawing_force")
  |>group()

  join(
 tables: {data3:data3,data4:data4}, 
 on: ["COIL_ID"], method: "inner"
)
|> map(fn: (r) => ({ r with _va: r._value2/r._value1 }))
|> map(fn: (r) => ({ r with force_relation: r._va * 100.0 }))

10. relation between avg Pushing Force and avg  Drawing Force


data1 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Drawing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value1: r.Drawing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> max(column: "Drawing_force")
  |> group()

  data2 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "Pushing_force")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value2: r.Pushing_force }))
  |> group(columns: ["COIL_ID"], mode:"by")
  |> group()




11. Production time

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "ISTWERT_ZIEHGESCHW_m_min" or r["_field"] == 
  "Lichtschranke_am_Hauptgetriebe_RSZ_")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => r.ISTWERT_ZIEHGESCHW_m_min > 5.0)
  |> toFloat()
  |> filter( fn: (r) => r.Lichtschranke_am_Hauptgetriebe_RSZ_ == 1 )
  |> group(columns: ["COIL_ID"]) 
  |> count(column: "Lichtschranke_am_Hauptgetriebe_RSZ_")
  |> map(fn: (r) =>	({r with _val: r.Lichtschranke_am_Hauptgetriebe_RSZ_ * 1 / 60}))
  |> map(fn:(r) => ({ r with _result1: float(v: r._val) }))

12. Total time

from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "Lichtschranke_am_Hauptgetriebe_RSZ_" or r["_field"] == "COIL_ID")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value: r.Lichtschranke_am_Hauptgetriebe_RSZ_ }))
  //|> count(column: "_value")
  |> group(columns: ["COIL_ID"])
  |> count(column: "_value")
  |> map(fn: (r) =>	({r with _val: r._value * 1 / 60}))
  |> map(fn:(r) => ({ r with _result2: float(v: r._val) }))

13.Productivity

data1 = from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "COIL_ID" or r["_field"] == "ISTWERT_ZIEHGESCHW_m_min" or r["_field"] == 
  "Lichtschranke_am_Hauptgetriebe_RSZ_")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => r.ISTWERT_ZIEHGESCHW_m_min > 5.0)
  |> filter( fn: (r) => r.Lichtschranke_am_Hauptgetriebe_RSZ_ == 1 )
  //|> count(column: "_value")
  |> group(columns: ["COIL_ID"]) 
  |> count(column: "Lichtschranke_am_Hauptgetriebe_RSZ_")
  |> map(fn: (r) =>	({r with _val1: r.Lichtschranke_am_Hauptgetriebe_RSZ_ * 1 / 60}))
  |> map(fn:(r) => ({ r with _result1: float(v: r._val1) }))


 data2 =  from(bucket: "bright-bar-steel")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "iba15")
  |> filter(fn: (r) => r["_field"] == "Lichtschranke_am_Hauptgetriebe_RSZ_" or r["_field"] == "COIL_ID")
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> map(fn: (r) =>	({r with _value: r.Lichtschranke_am_Hauptgetriebe_RSZ_ }))
  //|> count(column: "_value")
  |> group(columns: ["COIL_ID"])
  |> count(column: "_value")
  |> map(fn: (r) =>	({r with _val2: r._value * 1 / 60}))
  |> map(fn:(r) => ({ r with _result2: float(v: r._val2) }))


  join(
 tables: {data1:data1,data2:data2}, 
  on: ["COIL_ID"], method: "inner"
)
|> map(fn: (r) => ({ r with _productivity: r._result1 / r._result2 * 100.0 }))




