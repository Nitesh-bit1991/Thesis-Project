Influx 2.0 Queries:

1. Online Force

from(bucket: "project")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "machine")
  |> filter(fn: (r) => r["_field"] == "Ziehkraft_IST_LIN_int")

2. Online Speed

from(bucket: "project")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "machine")
  |> filter(fn: (r) => r["_field"] == "ISTWERT_ZIEHGESCHW_m_min")

3. Max Pushing Force from original Force

from(bucket: "test")
|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
|> filter(fn: (r) =>
r._measurement == "test1" and
r._field =~ /Ziehkraft_IST_LIN_int|Drehzahl_Istwert_vom_Regler/
)
|> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")


|> filter(fn: (r) => r.Drehzahl_Istwert_vom_Regler < 0.725)


|> group(columns: ["coil_id"])
|>max(column: "Ziehkraft_IST_LIN_int")
|>group()

3. Mean Drawing Force from original Force

from(bucket: "test")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) =>
    r._measurement == "test1" and
    r._field =~ /Ziehkraft_IST_LIN_int|ISTWERT_ZIEHGESCHW_m_min/
 )
 |>pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
 |> filter(fn: (r) => r.ISTWERT_ZIEHGESCHW_m_min > 10)
 |> group (columns:["coil_id"])
 |> mean(column:"Ziehkraft_IST_LIN_int")


4. relation between forces

data = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "PUSHING_FORCE"
 )
 |> group(columns: ["coil_id"])
 |> max() 
 |> group()
data1 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> max() 
 |>group()
join(
 tables: {data:data,data1:data1}, 
  on: ["coil_id"], method: "inner"
 )
 |> map(fn: (r) => ({ r with _value: r._value_data/r._value_data1 }))
 |> map(fn: (r) => ({ r with force_relation: r._value * 100.0 }))

5. Average Pushing_Force above max drawing force

data1 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> max() 
 |>group()

 data2 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "PUSHING_FORCE"
 )
 |> group(columns: ["coil_id"])
 |>group()

 
join(
 tables: {data1:data1,data2:data2}, 
 on: ["coil_id"], method: "inner"
)
|> filter(fn: (r) => r._value_data2 > r._value_data1)
|> group(columns: ["coil_id"])
|>mean(column:"_value_data2")
|> map(fn: (r) => ({ r with _result: r._value_data2 / 10.0 }))


6. Production time

from(bucket: "test")
	|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
	|> filter(fn: (r) =>
		(r["_measurement"] == "test1"))
	|> filter(fn: (r) =>
		(r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" ))
	|> filter( fn: (r) => r._value == true )
	|> count(column: "_value")
    |> toFloat()
    |> group(columns: ["coil_id"])
    |> map(fn: (r) =>	({r with _val: r._value * 0.1 / 60.0}))

7. Non production time

from(bucket: "test")
	|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
	|> filter(fn: (r) =>
		(r["_measurement"] == "test1"))
	|> filter(fn: (r) =>
		(r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" ))
	|> filter( fn: (r) => r._value == false )
	|> count(column: "_value")
        |> toFloat()
	|> group(columns: ["coil_id"])
    |> map(fn: (r) =>	({r with _val: r._value * 0.10 / 60.0}))

8. Total time 

from(bucket: "test")
	|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
	|> filter(fn: (r) =>
		(r["_measurement"] == "test1"))
	|> filter(fn: (r) =>
		(r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" ))
	|> count(column: "_value")
    |> toFloat()
    |> group(columns: ["coil_id"])
    |> map(fn: (r) =>	({r with _val: r._value * 0.10 / 60.0}))

9. Productivity

data1 = from(bucket: "test")
	|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
	|> filter(fn: (r) =>
		(r["_measurement"] == "test1"))
	|> filter(fn: (r) =>
		(r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" ))
	|> filter( fn: (r) => r._value == true )
	|> count(column: "_value")
	|> group(columns: ["coil_id"])
    |> toFloat()
    |> map(fn: (r) =>	({r with _val: r._value * 0.1 / 60.0}))
 
data2 = from(bucket: "test")
	|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
	|> filter(fn: (r) =>
		(r["_measurement"] == "test1"))
	|> filter(fn: (r) =>
		(r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" ))
	|> count(column: "_value")
    |> toFloat()
	|> group(columns: ["coil_id"])
    |> map(fn: (r) =>	({r with _val: r._value * 0.10 / 60.0}))

join(
 tables: {data1:data1,data2:data2}, 
  on: ["coil_id"], method: "inner"
)
|> map(fn: (r) => ({ r with _m: r._val_data1 / r._val_data2 * 100.0 }))
|>group()


10. Stddev of drawing force

from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> stddev() 
 |> map(fn: (r) => ({ r with _result: r._value / 10.0 }))

11. std deviation of Pushing_Force above max drawing force

data1 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> max() 
 |>group()

 data2 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "PUSHING_FORCE"
 )
 |> group(columns: ["coil_id"])
 |>group()

 
join(
 tables: {data1:data1,data2:data2}, 
 on: ["coil_id"], method: "inner"
)
|> filter(fn: (r) => r._value_data2 > r._value_data1)
|> group(columns: ["coil_id"])
|>stddev(column:"_value_data2")
|> map(fn: (r) => ({ r with _result: r._value_data2 / 10.0 }))

12. relation between avg Pushing_Force above max Drawing Force and avg Drawing Force

data1 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> max() 
 |>group()

 data2 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "PUSHING_FORCE"
 )
 |> group(columns: ["coil_id"])
 |>group()

data3 = join(
 tables: {data1:data1,data2:data2}, 
 on: ["coil_id"], method: "inner"
)
|> filter(fn: (r) => r._value_data2 > r._value_data1)
|> group(columns: ["coil_id"])
|>mean(column:"_value_data2")
//|> map(fn: (r) => ({ r with _result: r._value_data2 / 10.0 }))

data4 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> mean() 
 |>group()

 join(
 tables: {data3:data3,data4:data4}, 
 on: ["coil_id"], method: "inner"
)
|> map(fn: (r) => ({ r with _va: r._value_data2/r._value }))
|> map(fn: (r) => ({ r with force_relation: r._va * 100.0 }))

13. relation between stdev Pushing_Force > max Drawing F and stdev Drawing Force


data1 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> max() 
 |>group()

 data2 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "PUSHING_FORCE"
 )
 |> group(columns: ["coil_id"])
 |>group()

data3 = join(
 tables: {data1:data1,data2:data2}, 
 on: ["coil_id"], method: "inner"
)
|> filter(fn: (r) => r._value_data2 > r._value_data1)
|> group(columns: ["coil_id"])
|> stddev(column:"_value_data2")
//|> map(fn: (r) => ({ r with _result: r._value_data2 / 10.0 }))

data4 = from(bucket: "test")
 |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
 |> filter(fn: (r) =>
 r._measurement == "test1" and
 r._field == "Drawing_Force"
 )
 |> group(columns: ["coil_id"])
 |> stddev() 
 |>group()

 join(
 tables: {data3:data3,data4:data4}, 
 on: ["coil_id"], method: "inner"
)
|> map(fn: (r) => ({ r with _va: r._value_data2/r._value }))
|> map(fn: (r) => ({ r with force_relation: r._va * 100.0 }))

14. Production actual

from(bucket: "test")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "test1")
  |> filter(fn: (r) => r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" or r["_field"] == "ISTWERT_ZIEHGESCHW_m_min" )
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => r.ISTWERT_ZIEHGESCHW_m_min > 5.0) 
  |> filter( fn: (r) => r.lichtschranke_am_hauptgetriebe_rsz_ == true )
  |> map(fn: (r) =>	({r with _value: r.lichtschranke_am_hauptgetriebe_rsz_ }))
  |> count()
  |> toFloat()
  |> map(fn: (r) =>	({r with _val: r._value * 0.1 / 60.0}))

15. Productivity actual

data1 = from(bucket: "test")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "test1")
  |> filter(fn: (r) => r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" or r["_field"] == "ISTWERT_ZIEHGESCHW_m_min" )
  |> pivot(rowKey:["_time"], columnKey: ["_field"], valueColumn: "_value")
  |> filter(fn: (r) => r.ISTWERT_ZIEHGESCHW_m_min > 5.0) 
  |> filter( fn: (r) => r.lichtschranke_am_hauptgetriebe_rsz_ == true )
  |> map(fn: (r) =>	({r with _value: r.lichtschranke_am_hauptgetriebe_rsz_ }))
  |> count()
  |> toFloat()
  |> map(fn: (r) =>	({r with _val: r._value * 0.1 / 60.0}))
 
data2 = from(bucket: "test")
	|> range(start: v.timeRangeStart, stop: v.timeRangeStop)
	|> filter(fn: (r) =>
		(r["_measurement"] == "test1"))
	|> filter(fn: (r) =>
		(r["_field"] == "lichtschranke_am_hauptgetriebe_rsz_" ))
	|> count(column: "_value")
    |> toFloat()
	|> group(columns: ["coil_id"])
    |> map(fn: (r) =>	({r with _val: r._value * 0.10 / 60.0}))

join(
 tables: {data1:data1,data2:data2}, 
  on: ["coil_id"], method: "inner"
)
|> map(fn: (r) => ({ r with _m: r._val_data1 / r._val_data2 * 100.0 }))
|>group()










